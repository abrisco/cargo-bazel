workspace(name = "cargo_bazel_examples")

local_repository(
    name = "cargo_bazel",
    path = "../../",
)

load("@cargo_bazel//:deps.bzl", "cargo_bazel_deps")

cargo_bazel_deps()

# Note: Bootstrapping is not necessary when using official releases. For the purposes
# of this example, it's only here to allow the workspace to build successfully in CI
# at an arbitrary commit.
load("@cargo_bazel//:deps_bootstrap.bzl", "cargo_bazel_bootstrap")

cargo_bazel_bootstrap()

load("@rules_rust//rust:repositories.bzl", "rust_repositories")

rust_repositories()

load("@cargo_bazel//:defs.bzl", "crate", "crates_repository")

crates_repository(
    # The name here needs to be short to avoid long path issues on windows
    # when running the `libnghttp2-sys` build script.
    name = "m_pkgs",
    annotations = {
        "basic-cookies": [crate.annotation(
            build_script_data_glob = ["**/*.lalrpop"],
        )],
        "curl-sys": [crate.annotation(
            gen_build_script = False,
            deps = [
                "@curl",
                "@libssh2",
            ],
        )],
        "lalrpop": [crate.annotation(
            data_glob = ["**/*.lalrpop"],
        )],
        "libnghttp2-sys": [crate.annotation(
            build_script_data_glob = ["nghttp2/**"],
            data_glob = ["nghttp2/**"],
        )],
        "libz-sys": [crate.annotation(
            build_script_data_glob = ["src/**"],
        )],
        "openssl-sys": [crate.annotation(
            build_script_data = [
                "@openssl//:gen_dir",
                "@openssl//:openssl",
            ],
            build_script_data_glob = ["build/**/*.c"],
            build_script_env = {
                "OPENSSL_DIR": "$(execpath @openssl//:gen_dir)",
                "OPENSSL_STATIC": "1",
            },
            data = ["@openssl"],
            deps = ["@openssl"],
        )],
        "wepoll-ffi": [crate.annotation(
            build_script_data_glob = ["vendor/**"],
        )],
    },
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//:Cargo.Bazel.lock",
    manifests = [
        "//pkg_a:Cargo.toml",
        "//sub_pkgs/pkg_b:Cargo.toml",
        "//sub_pkgs/pkg_c:Cargo.toml",
    ],
)

load(
    "@m_pkgs//:defs.bzl",
    multi_pkg_crate_repositories = "crate_repositories",
)

multi_pkg_crate_repositories()

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# ForeignCc is used to build OpenSSL
http_archive(
    name = "rules_foreign_cc",
    sha256 = "1df78c7d7eed2dc21b8b325a2853c31933a81e7b780f9a59a5d078be9008b13a",
    strip_prefix = "rules_foreign_cc-0.7.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.7.0.tar.gz",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

# Load OpenSSL and other 3rd party dependencies
load("//3rdparty:third_party_deps.bzl", "third_party_deps")

third_party_deps()

# perl is used to build openssl
http_archive(
    name = "rules_perl",
    sha256 = "55fbe071971772758ad669615fc9aac9b126db6ae45909f0f36de499f6201dd3",
    strip_prefix = "rules_perl-2f4f36f454375e678e81e5ca465d4d497c5c02da",
    urls = [
        "https://github.com/bazelbuild/rules_perl/archive/2f4f36f454375e678e81e5ca465d4d497c5c02da.tar.gz",
    ],
)

load("@rules_perl//perl:deps.bzl", "perl_register_toolchains", "perl_rules_dependencies")

perl_rules_dependencies()

perl_register_toolchains()
