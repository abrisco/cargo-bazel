workspace(name = "cargo_bazel_examples")

local_repository(
    name = "cargo_bazel",
    path = "../",
)

load("@cargo_bazel//:deps.bzl", "cargo_bazel_deps")

cargo_bazel_deps()

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

rust_register_toolchains()

load("@cargo_bazel//:deps_bootstrap.bzl", "cargo_bazel_bootstrap")

# Note: Bootstrapping is not necessary when using official releases. For the purposes
# of this example, it's only here to allow the workspace to build successfully in CI
# at an arbitrary commit.
cargo_bazel_bootstrap()

load("@cargo_bazel//:defs.bzl", "crate", "crates_repository", "splicing_config")

###############################################################################
# C A R G O   A L I A S E S
###############################################################################

crates_repository(
    name = "cargo_aliases",
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//cargo_aliases:Cargo.Bazel.lock",
    manifests = ["//cargo_aliases:Cargo.toml"],
)

load(
    "@cargo_aliases//:defs.bzl",
    cargo_aliases_crate_repositories = "crate_repositories",
)

cargo_aliases_crate_repositories()

###############################################################################
# C A R G O   L O C A L
###############################################################################

crates_repository(
    name = "crate_index_cargo_local",
    lockfile = "//cargo_local:Cargo.lock",
    lockfile_kind = "cargo",
    manifests = ["//cargo_local:Cargo.toml"],
)

load(
    "@crate_index_cargo_local//:defs.bzl",
    cargo_local_crate_repositories = "crate_repositories",
)

cargo_local_crate_repositories()

###############################################################################
# C A R G O   R E M O T E
###############################################################################

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "names",
    build_file = "//cargo_remote:BUILD.names.bazel",
    sha256 = "9a143ae56c0f9bc375be22a6b25c959ad042e83e7d6be2392074e77ee8257d0e",
    strip_prefix = "names-0.12.0",
    urls = ["https://github.com/fnichol/names/archive/refs/tags/v0.12.0.zip"],
)

crates_repository(
    name = "crate_index_cargo_remote",
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "@names//:Cargo.lock",
    lockfile_kind = "cargo",
    manifests = ["@names//:Cargo.toml"],
)

load(
    "@crate_index_cargo_remote//:defs.bzl",
    cargo_remote_crate_repositories = "crate_repositories",
)

cargo_remote_crate_repositories()

###############################################################################
# C A R G O   W O R K S P A C E
###############################################################################

crates_repository(
    name = "crate_index_cargo_workspace",
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//cargo_workspace:Cargo.Bazel.lock",
    manifests = [
        "//cargo_workspace:Cargo.toml",
        "//cargo_workspace/num_printer:Cargo.toml",
        "//cargo_workspace/printer:Cargo.toml",
        "//cargo_workspace/rng:Cargo.toml",
    ],
)

load(
    "@crate_index_cargo_workspace//:defs.bzl",
    cargo_workspace_crate_repositories = "crate_repositories",
)

cargo_workspace_crate_repositories()

###############################################################################
# E X T R A   W O R K S P A C E   M E M B E R S
###############################################################################

crates_repository(
    name = "crate_index_extra_members",
    extra_workspace_members = {
        "texture-synthesis-cli": crate.workspace_member(
            sha256 = "a7dbdf13f5e6f214750fce1073279b71ce3076157a8d337c9b0f0e14334e2aec",
            version = "0.8.2",
        ),
    },
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//extra_workspace_members:Cargo.Bazel.lock",
    manifests = ["//extra_workspace_members:Cargo.toml"],
)

load(
    "@crate_index_extra_members//:defs.bzl",
    extra_workspace_members_crate_repositories = "crate_repositories",
)

extra_workspace_members_crate_repositories()

###############################################################################
# M U L T I   P A C K A G E
###############################################################################

crates_repository(
    # The name here needs to be short to avoid long path issues on windows
    # when running the `libnghttp2-sys` build script.
    name = "m_pkgs",
    annotations = {
        "curl-sys": [crate.annotation(
            gen_build_script = False,
            deps = [
                "@curl",
                "@libssh2",
            ],
        )],
        "lalrpop": [crate.annotation(
            data_glob = ["**/*.lalrpop"],
        )],
        "libnghttp2-sys": [crate.annotation(
            build_script_data_glob = ["nghttp2/**"],
            data_glob = ["nghttp2/**"],
        )],
        "openssl-sys": [crate.annotation(
            build_script_data = [
                "@openssl//:gen_dir",
                "@openssl//:openssl",
            ],
            build_script_data_glob = ["build/**/*.c"],
            build_script_env = {
                "OPENSSL_DIR": "$(execpath @openssl//:gen_dir)",
                "OPENSSL_STATIC": "1",
            },
            data = ["@openssl"],
            deps = ["@openssl"],
        )],
        "wepoll-ffi": [crate.annotation(
            build_script_data_glob = ["vendor/**"],
        )],
    },
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//multi_package:Cargo.Bazel.lock",
    manifests = [
        "//multi_package/pkg_a:Cargo.toml",
        "//multi_package/sub_pkgs/pkg_b:Cargo.toml",
        "//multi_package/sub_pkgs/pkg_c:Cargo.toml",
    ],
)

load(
    "@m_pkgs//:defs.bzl",
    multi_pkg_crate_repositories = "crate_repositories",
)

multi_pkg_crate_repositories()

# ForeignCc is used to build OpenSSL
http_archive(
    name = "rules_foreign_cc",
    sha256 = "1df78c7d7eed2dc21b8b325a2853c31933a81e7b780f9a59a5d078be9008b13a",
    strip_prefix = "rules_foreign_cc-0.7.0",
    url = "https://github.com/bazelbuild/rules_foreign_cc/archive/0.7.0.tar.gz",
)

load("@rules_foreign_cc//foreign_cc:repositories.bzl", "rules_foreign_cc_dependencies")

rules_foreign_cc_dependencies()

# Load OpenSSL and other 3rd party dependencies
load("//multi_package/3rdparty:third_party_deps.bzl", "third_party_deps")

third_party_deps()

# perl is used to build openssl
http_archive(
    name = "rules_perl",
    sha256 = "55fbe071971772758ad669615fc9aac9b126db6ae45909f0f36de499f6201dd3",
    strip_prefix = "rules_perl-2f4f36f454375e678e81e5ca465d4d497c5c02da",
    urls = [
        "https://github.com/bazelbuild/rules_perl/archive/2f4f36f454375e678e81e5ca465d4d497c5c02da.tar.gz",
    ],
)

load("@rules_perl//perl:deps.bzl", "perl_register_toolchains", "perl_rules_dependencies")

perl_rules_dependencies()

perl_register_toolchains()

###############################################################################
# N O   C A R G O   M A N I F E S T S
###############################################################################

crates_repository(
    name = "no_cargo",
    annotations = {
        "axum": [crate.annotation(
            compile_data_glob = ["**/*.md"],
        )],
    },
    # `generator` is not necessary in official releases.
    # See load satement for `cargo_bazel_bootstrap`.
    generator = "@cargo_bazel_bootstrap//:cargo-bazel",
    lockfile = "//no_cargo_manifests:Cargo.Bazel.lock",
    packages = {
        "axum": crate.spec(
            version = "0.4.0",
        ),
        "hyper": crate.spec(
            features = ["full"],
            version = "0.14",
        ),
        "mime": crate.spec(
            version = "0.3",
        ),
        "serde_json": crate.spec(
            version = "1.0",
        ),
        # TODO: This is pinned due to a build failure introduced by 1.17
        # bringing in windows-sys and introduces linker errors.
        # https://github.com/abrisco/cargo-bazel/issues/173
        "tokio": crate.spec(
            features = ["full"],
            version = "=1.16.1",
        ),
        "tower": crate.spec(
            features = ["util"],
            version = "0.4",
        ),
        "tower-http": crate.spec(
            features = ["trace"],
            version = "0.2.1",
        ),
        "tracing": crate.spec(
            version = "0.1",
        ),
        "tracing-subscriber": crate.spec(
            version = "0.3",
        ),
    },
    splicing_config = splicing_config(
        resolver_version = "2",
    ),
)

load(
    "@no_cargo//:defs.bzl",
    no_cargo_crate_repositories = "crate_repositories",
)

no_cargo_crate_repositories()
